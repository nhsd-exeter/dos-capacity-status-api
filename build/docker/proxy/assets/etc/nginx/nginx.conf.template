worker_processes 4;
events {
  worker_connections 1024;
}
http {
  include mime.types;
  default_type application/octet-stream;
  sendfile on;
  keepalive_timeout 65;
  upstream API_HOST_TO_REPLACE {
    server API_HOST_TO_REPLACE:8443;
  }

  map $http_x_forwarded_for $allow_host1 {
    ALLOWED_HOSTS_TO_REPLACE
    default 0;
  }
  map $host $allow_host2 {
    ALLOWED_HOSTS_TO_REPLACE
    default 0;
  }

  map $time_iso8601 $time_iso8601_p1 {
    ~([^+]+) $1;
  }
  map $time_iso8601 $time_iso8601_p2 {
    ~\+([0-9:]+)$ $1;
  }
  map $msec $millisec {
    ~\.([0-9]+)$ $1;
  }

  limit_req_zone $binary_remote_addr zone=api-limit:10m rate=3r/s;

  server {
    listen 443 ssl;
    server_name localhost;
    server_tokens off;
    ssl_certificate /certificate/certificate.pem;
    ssl_certificate_key /certificate/certificate.key;

    add_header X-Request-ID $request_id;

    location / {
      deny all;
    }

    location /static/ {
      limit_req zone=api-limit burst=8 nodelay;
      autoindex on;
      root /application;
    }
    location ~ /static/admin {
      limit_req zone=api-limit burst=8 nodelay;
      autoindex on;
      root /application;
    }
    location ~ /admin {

      set $test 0;
      if ($allow_host1 = 1) {
        set $test 1;
      }
      if ($allow_host2 = 1) {
        set $test 1;
      }
      if ($test = 0) {
        return 403;
      }

      proxy_pass https://API_HOST_TO_REPLACE;
      proxy_redirect off;
      proxy_set_header Host $host;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $server_name;

      limit_req zone=api-limit burst=8 nodelay;
    }
    location /api {
      proxy_pass https://API_HOST_TO_REPLACE;
      proxy_redirect off;
      proxy_set_header Host $host;
      proxy_set_header X-Request-ID $request_id;
      proxy_set_header X-Real-IP $remote_addr;
      proxy_set_header X-Client-IP $http_x_forwarded_for;
      proxy_set_header X-Forwarded-For $proxy_add_x_forwarded_for;
      proxy_set_header X-Forwarded-Host $server_name;
      proxy_set_header X-Request-Received $time_iso8601_p1.$millisec+$time_iso8601_p2;

      limit_req zone=api-limit burst=8 nodelay;
    }
    location /health {
      return 200 'healthcheck success from proxy server';
      add_header Content-Type text/plain;

      limit_req zone=api-limit burst=8 nodelay;
    }
  }
  include servers/*;
}
