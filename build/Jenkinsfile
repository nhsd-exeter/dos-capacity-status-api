#!/usr/bin/env groovy

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '10'))
        disableConcurrentBuilds()
    }

    environment {
        GIT_COMMIT_HASH = ''
        TIMESTAMP = ''
        GIT_TAG = ''
        ROLE = ''
        WEBHOOK_URL = ''
    }

    // if (env.BRANCH_NAME != 'master') {
    //     error("Commit Pipeline must be run from master branch")
    // } // Extra check to put in first stage if needed

    stages {
        stage("Set up Variables") {
            steps {
                script {
                    this.GIT_COMMIT_HASH = sh(returnStdout: true, script: 'make git-commit-get-hash')
                    sh "echo ${this.GIT_COMMIT_HASH}"
                    this.TIMESTAMP = sh(returnStdout: true, script: 'make project-timestamp')
                    sh "echo ${this.TIMESTAMP}"
                    this.GIT_TAG = sh(returnStdout: true, script: 'make git-create-tag')
                    sh "echo ${GIT_TAG}"
                    sh 'make devops-print-variables'
                }
            }
        }
        stage("Start up Test Database") {
            steps {
                script {
                    sh 'export PROFILE=local && make test-db-start-jenkins'
                }
            }
        }
        stage("Build Images") {
            steps {
                script {
                    sh 'make build'
                }
            }
        }
        stage("Run Tests (against code)") {
            steps {
                script {
                    sh 'echo Run Migration'
                    sh 'make migrate-jenkins'
                }
                script {
                    sh 'echo Unit Tests'
                    sh 'export PROFILE=local && make test-unit-only-jenkins'
                }
                script {
                    sh 'echo Regression Tests'
                    sh 'export PROFILE=local && make test-regression-only-jenkins'
                }
            }
        }
        stage("Tag Docker Images") {
            steps {
                script {
                    sh "make docker-tag NAME=api TAG=${this.GIT_TAG}"
                    sh "make docker-tag NAME=proxy TAG=${this.GIT_TAG}"
                }
            }
        }
        stage("Push Images") {
            steps {
                script {
                    sh "make docker-push NAME=api TAG=${this.GIT_TAG}"
                    sh "make docker-push NAME=proxy TAG=${this.GIT_TAG}"
                }
            }
        }
        // stage("Tag Git Commit") {
        //     steps {
        //         script {
        //             sh "make git-tag-master-commit TAG=${this.GIT_TAG}"
        //             // Need user set up with git access, can wait until Dan is back, manual step for now
        //         }
        //     }
        // }
    }
    post {
        failure {
            script {
                sh 'make stop'
                sh 'make api-clean'
                sh 'make proxy-clean'
                sh "make aws-assume-role-export-variables PROFILE=dev"
                sh "secret_store_results=\$(aws secretsmanager get-secret-value --secret-id uec-dos-api-cs/deployment --region 'eu-west-2' --query 'SecretString' --output text)"
                sh "export WEBHOOK_URL=\$(echo ${secret_store_results} | jq --raw-output '.webhook_url')"
                sh "curl -X POST -H 'Content-type: application/json' --data {text:hello} ${WEBHOOK_URL}"
                // Update clean make targets to remove networks, as builds fail after 10
            }
        }
        cleanup {
            script {
                sh 'make stop'
                sh 'make api-clean'
                sh 'make proxy-clean'
                sh 'make jenkins-clean' // TODO: Target made, check if required
            }
        }
    }
}

