pipeline {
  agent {
    label 'jenkins-slave'
  }
  options {
    buildDiscarder(logRotator(numToKeepStr: '10'))
    disableConcurrentBuilds()
  }
  environment {
    BUILD_DATE = sh(returnStdout: true, script: "date -u +'%Y-%m-%dT%H:%M:%S%z'").trim()
    GIT_COMMIT_HASH = sh(returnStdout: true, script: 'make git-commit-get-hash').trim()
    GIT_TAG = sh(returnStdout: true, script: 'make git-create-tag').trim()
  }

  stages {
    stage('Set up Variables') {
      steps {
        script {
          sh "echo ${this.GIT_COMMIT_HASH}"
          sh "echo ${this.BUILD_DATE}"
          sh "echo ${GIT_TAG}"
          sh 'make devops-print-variables'
        }
      }
    }
    stage('Start up Test Database') {
      steps {
        script {
          sh 'make test-db-start'
        }
      }
    }
    stage('Build Images') {
      steps {
        script {
          sh 'make build'
        }
      }
    }
    stage('Run Tests') {
      steps {
        script {
          sh 'make migrate'
        }
        script {
          sh 'make test-unit-only'
        }
        script {
          sh 'make test-regression-only'
        }
      }
    }
    stage('Push Images') {
      steps {
        script {
          sh 'make docker-push NAME=api'
          sh 'make docker-push NAME=proxy'
        }
      }
    }
  // stage("Tag Git Commit") {
  //     steps {
  //         script {
  //             sh "make git-tag-create TAG=${this.GIT_TAG}"
  //             // Need user set up with git access, can wait until Dan is back, manual step for now
  //         }
  //     }
  // }
  }
  post {
    failure {
      script {
        sh """
          export "BUILD_STATUS=${currentBuild.currentResult}"
          export "PIPELINE_NAME=Commit Pipeline"
          make slack-it
        """
      }
    }
    cleanup {
      script {
        sh 'make stop'
        sh 'make api-clean'
        sh 'make proxy-clean'
      }
    }
  }
}
