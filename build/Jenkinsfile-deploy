#!/usr/bin/env groovy

pipeline {
  agent {
    label 'jenkins-slave'
  }

  options {
    buildDiscarder(logRotator(numToKeepStr: '5'))
  }

  environment {
    PROFILE = 'dev'
    BRANCH_NAME = "${GIT_BRANCH}"
    GIT_COMMIT = sh(returnStdout: true, script: 'make git-commit-get-hash')
    GIT_TAG = sh(returnStdout: true, script: 'make git-tag-get-latest').trim()
  }

  stages {
    stage('Set up Variables') {
      steps {
        script {
          sh 'make devops-print-variables'
          this.BRANCH_NAME = env.BRANCH_NAME
          sh "echo BRANCH_NAME=${BRANCH_NAME}"
          sh "echo GIT_COMMIT=${GIT_COMMIT}"
          sh "echo GIT_TAG=${GIT_TAG}"
        }
      }
    }
    stage('Check Deployment') {
      steps {
        script {
          IS_MASTER_BRANCH = sh(returnStdout: true, script: "make git-tag-is-present-on-branch TAG=${GIT_TAG} BRANCH=task/build_phase_two_deploy_pipeline") //TODO change BRANCH to master when finalising pipeline
          if (IS_MASTER_BRANCH == 'false') {
            currentBuild.result = 'FAILURE'
            return
          }
          if (this.GIT_TAG.split('-')[-1] == 'prod') {
            this.PROFILE = 'prod'
          } else if (this.GIT_TAG.split('-')[-1] == 'demo') {
            this.PROFILE = 'demo'
          } else {
            this.PROFILE = 'dev'
          }
          if (this.PROFILE == 'prod' || this.PROFILE == 'demo') {
            // Evaluate tags to check for Release Candidate, if no RC tag, don't deploy
            sh 'make git-tag-is-release-candidate COMMIT=${this.GIT_COMMIT}'
            currentBuild.result = 'FAILURE'
            return
          }
        }
      }
    }
    stage('Provision Infrastructure') {
      steps {
        // script {
        //     sh "echo Checking to see if RDS Snapshot is needed"
        //     if this.PROFILE != 'DEV': // for snapshot
        //     sh "echo Creating RDS Snapshot"
        //     assume role to be able to snapshot
        //     sh "make aws-rds-create-snapshot DB_INSTANCE=Need to get from SecretManager SNAPSHOT_NAME=${GIT_TAG}" //snapshot the database and name/tag it timestamp-profile (git tag)
        //     sh "make aws-rds-wait-for-snapshot SNAPSHOT_NAME=${GIT_TAG}"
        // }
        script {
          sh "echo Provisioning infrastructure for ${PROFILE} environment"
          sh 'make docker-config' // need to clean up the network this statement creates
          // need to assume aws role related to profile e.g. non-prod for DEV, prod for DEMO and PROD
          // sh "make terraform-apply-auto-approve STACKS=infrastructure/stacks PROFILE=${this.PROFILE}"
          sh "make terraform-apply-auto-approve STACKS=service PROFILE=${PROFILE} OPTS='--var-file=../tfvars/nonprod.tfvars' | tee /tmp/terraform_changes.txt"
        }
      // Extra maybe add some way of git tagging the infrastructure with the git_tag and the commit
      }
    }
    // stage("Migrate Changes to Database") {
    //   steps {
    //     script {
    //       sh "make migrate-to-infrastructure API_VERSION=latest PROFILE=${PROFILE}"
    //     }
    //   }
    // }
    stage('Deploy Application') {
      steps {
        //TODO Need additional step to set the docker images used for the deploy to the one matching the git tag being pulled
        script {
          sh "make deploy PROFILE=${PROFILE} | tee /tmp/deployment_stats.txt"
        // Add to above command
        }
      }
    }
    stage('Load Test Data') {
      when { expression { this.PROFILE == 'dev' } }
      steps {
        script {
          sh "make deploy-job PROFILE=${PROFILE}"
        }
      }
    }
    // stage("Run Tests") {
    //     steps {
    //         script {
    //             sh 'make test'
    //         }
    //     }
    // }
    stage('Deployment Summary') {
      steps {
        script {
          sh 'echo Terraform Changes'
          sh "cat /tmp/terraform_changes.txt | grep -E 'Apply...'"
          sh 'echo Is deployment running?'
          sh "cat /tmp/deployment_stats.txt | grep -E 'Display namespaces' --after-context=100"
          sh 'echo URL'
          sh 'make url'
        }
      }
    }
  }
  post {
    success {
      script {
        if (this.PROFILE != 'dev') {
          sh """
            export BUILD_STATUS=${currentBuild.currentResult}
            export PIPELINE_NAME='Deploy Pipeline'
            make slack-it
          """
        }
      }
    }
    failure {
      script {
        sh """
          export BUILD_STATUS=${currentBuild.currentResult}
          export PIPELINE_NAME='Deploy Pipeline'
          make slack-it
        """
        sh 'make jenkins-upload-workspace'
      }
    }
    cleanup {
      script {
        script {
          sh 'make clean'
        }
      }
    }
  }
}
