#!/usr/bin/env groovy

pipeline {
    agent any

    options {
        buildDiscarder(logRotator(numToKeepStr: '5'))
    }

    environment {
        PROFILE = 'dev'
        BRANCH_NAME = "${GIT_BRANCH}"
        GIT_COMMIT = ''
        GIT_TAG = ''
    }

    stages {
        stage("Set up Variables") {
            steps {
                script {
                    sh 'make devops-print-variables'
                    this.BRANCH_NAME = env.BRANCH_NAME
                    sh "echo BRANCH_NAME=${BRANCH_NAME}"
                    GIT_COMMIT = sh(returnStdout: true, script: 'make git-commit-get-hash')
                    sh "echo GIT_COMMIT=${GIT_COMMIT}"
                    GIT_TAG = sh(returnStdout: true, script: "make git-tag-get-latest").trim()
                    sh "echo GIT_TAG=${GIT_TAG}"
                }
            }
        }
        stage("Check Deployment") {
            steps {
                script {
                    IS_MASTER_BRANCH = sh(returnStdout: true, script: "make git-tag-is-present-on-branch TAG=${GIT_TAG} BRANCH=task/build_phase_two_pipeline") //TODO change BRANCH to master when finalising pipeline
                    if (IS_MASTER_BRANCH == "false") {
                      currentBuild.result = 'FAILURE'
                      return
                    }
                    if (this.GIT_TAG.split('-')[-1] == 'prod') {
                      this.PROFILE = 'prod'
                    } else if (this.GIT_TAG.split('-')[-1] == 'demo') {
                        this.PROFILE = 'demo'
                    } else {
                        this.PROFILE = 'dev'
                    }
                    if (this.PROFILE == 'prod' || this.PROFILE == 'demo') {
                        // Evaluate tags to check for Release Candidate, if no RC tag, don't deploy
                        sh 'make git-tag-is-release-candidate COMMIT=${this.GIT_COMMIT}'
                        currentBuild.result = 'FAILURE'
                        return
                    }
                }
            }
        }
        stage("Provision Infrastructure") {
            steps {
                // script {
                //     sh "echo Checking to see if RDS Snapshot is needed"
                //     if this.PROFILE != 'DEV': // for snapshot
                //     sh "echo Creating RDS Snapshot"
                //     assume role to be able to snapshot
                //     sh "make aws-rds-create-snapshot DB_INSTANCE=Need to get from SecretManager SNAPSHOT_NAME=${GIT_TAG}" //snapshot the database and name/tag it timestamp-profile (git tag)
                //     sh "make aws-rds-wait-for-snapshot SNAPSHOT_NAME=${GIT_TAG}"
                // }
                script {
                    sh "echo Provisioning infrasturcture for ${PROFILE} environment"
                    sh "make docker-config" // need to clean up the network this statment creates
                    // need to asume aws role related to profile e.g. non-prod for DEV, prod for DEMO and PROD
                    // sh "make terraform-apply-auto-approve STACKS=infrastructure/stacks PROFILE=${this.PROFILE}"
                    TERRAFORM_OPTS='"--var-file=../tfvars/nonprod.tfvars"'
                    sh "make terraform-apply STACKS=service PROFILE=${PROFILE} OPTS=${TERRAFORM_OPTS}"
                }
                // Extra maybe add some way of tagging the infrasturcture with the git_tag and the commit
            }
        }
        stage("Pull Images & Tag Images For Deployment") {
            steps {
                script {
                    COMMIT_IMAGE_TAG = this.GIT_TAG.takeBefore("-${PROFILE}")
                    sh "make docker-pull NAME=proxy TAG=${COMMIT_IMAGE_TAG}-${GIT_COMMIT}"
                    sh "make docker-pull NAME=api TAG=${COMMIT_IMAGE_TAG}-${GIT_COMMIT}"
                }
                script {
                    sh "make docker-tag NAME=api TAG=${GIT_TAG}"
                    sh "make docker-tag NAME=proxy TAG=${GIT_TAG}"
                }
            }
        }
        // stage("Deploy Application") {
        //     steps {
        //         script {
        //             // sh 'make deploy PROFILE=${this.PROFILE}'
        //         }
        //     }
        // }
        // stage("Prepare Data") {
        //     steps {
        //         script {
        //             sh 'make prepare-data'
        //         }
        //     }
        // }
        // stage("Run Tests") {
        //     steps {
        //         script {
        //             sh 'make test'
        //         }
        //     }
        // }
        // stage("Deployment Summary") {
        //     steps {
        //         scripts {
        //             sh 'make deployment-summary'
        //         }
        //     }
        // }
    }
    post {
        always {
            script {
                if (this.PROFILE != 'DEV') {
                  sh """
                    export "RESULT=${currentBuild.currentResult}"
                    export "PIPELINE_NAME=Commit Pipeline"
                    make slack-send-notification PROFILE=dev GIT_TAG=${this.GIT_TAG}
                  """
                }
            }
        }
        failure {
          script {
            sh "make jenkins-upload-workspace"
          }
        }
        cleanup {
            script {
                script {
                sh 'make clean'
                sh 'make jenkins-clean'
                // Check if extra cleanup required
            }
            }
        }
    }
}
